service: agendamiento-citas
frameworkVersion: '3'

plugins:
  - serverless-esbuild

provider:
  name: aws
  runtime: nodejs20.x
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${env:STAGE, 'dev'}
  architecture: arm64
  environment:
    TABLE_CITAS: Citas
    RDS_PE_HOST: rds-pe.ckb0ayg62mzv.us-east-1.rds.amazonaws.com
    RDS_PE_PORT: "3306"
    RDS_PE_DATABASE: citas-pe
    RDS_CL_HOST: rds-cl.ckb0ayg62mzv.us-east-1.rds.amazonaws.com
    RDS_CL_PORT: "3306"
    RDS_CL_DATABASE: citas-cl
    RDS_USER: admin
    RDS_PASSWORD_SSM: /citas/${sls:stage}/rds/password
    SNS_CITAS_ARN:
      Ref: CitaTopic
    EB_BUS_NAME:
      Ref: CitaBus
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:UpdateItem
          Resource:
            - Fn::GetAtt:
                - CitasTable
                - Arn
            - Fn::Join:
                - '/'
                - - Fn::GetAtt: [ CitasTable, Arn ]
                  - index
                  - porAsegurado
        - Effect: Allow
          Action: sns:Publish
          Resource:
            Ref: CitaTopic
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - Fn::GetAtt: [ SQSPE, Arn ]
            - Fn::GetAtt: [ SQSCL, Arn ]
            - Fn::GetAtt: [ ConfirmationsQueue, Arn ]
        - Effect: Allow
          Action: events:PutEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource:
            - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/citas/${sls:stage}/rds/password
        - Effect: Allow
          Action:
            - kms:Decrypt
          Resource:
            - arn:aws:kms:${self:provider.region}:${aws:accountId}:alias/aws/ssm

functions:
  crearCita:
    handler: src/handlers/cita.crearCita
    events:
      - httpApi:
          path: /citas
          method: post

  listarPorAsegurado:
    handler: src/handlers/cita.listarPorAsegurado
    events:
      - httpApi:
          path: /citas/{aseguradoId}
          method: get

  confirmarCita:
    handler: src/handlers/cita.confirmarCita
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ ConfirmationsQueue, Arn ]
          batchSize: 10

  citaPE:
    handler: src/handlers/cita_pe.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ SQSPE, Arn ]
          batchSize: 10
    timeout: 30
    memorySize: 512

  citaCL:
    handler: src/handlers/cita_cl.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ SQSCL, Arn ]
          batchSize: 10
    timeout: 30
    memorySize: 512

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: false
    target: node20
    platform: node
    external: []
    exclude: []
    keepOutputDirectory: true
    concurrency: 10

resources:
  Resources:
    CitasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Citas
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: citaUuid
            AttributeType: S
          - AttributeName: aseguradoId
            AttributeType: S
        KeySchema:
          - AttributeName: citaUuid
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: porAsegurado
            KeySchema:
              - AttributeName: aseguradoId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    CitaTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: citaTopic-${sls:stage}

    SQSPE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: citas-pe-${sls:stage}

    SQSCL:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: citas-cl-${sls:stage}

    TopicSubscriptionPE:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn:
          Ref: CitaTopic
        Endpoint:
          Fn::GetAtt: [ SQSPE, Arn ]
        FilterPolicy:
          paisISO:
            - PE
        RawMessageDelivery: true

    TopicSubscriptionCL:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn:
          Ref: CitaTopic
        Endpoint:
          Fn::GetAtt: [ SQSCL, Arn ]
        FilterPolicy:
          paisISO:
            - CL
        RawMessageDelivery: true

    SQSPolicyPE:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: SQSPE
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt: [ SQSPE, Arn ]
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: CitaTopic

    SQSPolicyCL:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: SQSCL
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt: [ SQSCL, Arn ]
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: CitaTopic

    CitaBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: CitaBus

    ConfirmationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: citas-confirmaciones-${sls:stage}

    EventRuleToSQS:
      Type: AWS::Events::Rule
      Properties:
        EventBusName:
          Ref: CitaBus
        EventPattern:
          source:
            - cita.pe
            - cita.cl
          detail-type:
            - CitaConfirmada
        Targets:
          - Arn:
              Fn::GetAtt: [ ConfirmationsQueue, Arn ]
            Id: ToConfirmationsQueueTarget

    AllowEventBridgeToSQS:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: ConfirmationsQueue
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sqs:SendMessage
              Resource:
                Fn::GetAtt: [ ConfirmationsQueue, Arn ]